Занимаемая память объектом User{} без полей:
Заголовок включающий в себя
(HashCode, Garbage Collection Information, Lock) = 12 байт
Итого после округления получаем 16 байт.

Занимаемая память объектом User(1, "Name1"):
заголовок 12 байт + int 4 байта + ссылка на String 4 байта = 20 байт
округляем до кратному 8, получаем 24 байта.
считаем String 24 байта + массив char[] из 5 символов по 2 байта(22 байта округляем до 24) = 48 байт
Итого объект с заполненными полями занимает 72 байта.

При создании < 1870 объектов GC не срабатывает.
При создании 1870 объектов GC срабатывает редко.
При создании 2000 объектов GC срабатывает всегда.
При создании 18200 объектов GC программа заканчивает работу с ошибкой.

При создании нового объекта он помещается в heap, в область Eden.
При заполнении Eden выполнение программы приостанавливается, этот шаг называется "Stop the World".
Далее происходит маркировка, GC сканирует объекты и помечает те на которые есть ссылки.
Следующим шагом происходит очистка неиспользуемых объектов, а живые объекты перемещаются
в область памяти под названием Survivor space в раздел S0 или S1.
При следующем вызове сборщика мусора будут очищены Eden и S0 или S1(в зависимости в какой раздел были
перемещены объекты в предыдущем вызове сборщика).
При следующем вызове все повторяется, но области S0 и S1 меняюся местами, происходит взросление объектов.
Весь вышеперечисленный процесс называется минорной сборкой мусора (MinorGC).
После нескольких MinorGC живые объекты переходят в область Old Generation
При заполнении Old Generation происходит мажорная сборка мусорра (Major GC).
Мажорная сборка происходит медленнее так как Old Generation состоит в основном из живых объектов.





